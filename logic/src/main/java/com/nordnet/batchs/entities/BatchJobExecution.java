package com.nordnet.batchs.entities;

import static javax.persistence.GenerationType.IDENTITY;

// Generated 24 mars 2017 10:30:00 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * BatchJobExecution generated by hbm2java
 */
@Entity
@Table(name = "batch_job_execution")
public class BatchJobExecution implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Integer jobExecutionId;
	private Long version;
	private Batch batch;
	private Bean bean;
	private BatchJobInstance batchJobInstance;
	private Date createTime;
	private Date startTime;
	private Date endTime;
	private String status;
	private String exitCode;
	private String exitMessage;
	private Date lastUpdated;
	private String jobConfigurationLocation;
	private Set<BatchStepExecution> batchStepExecutions = new HashSet<BatchStepExecution>(0);
	private BatchJobExecutionParams batchJobExecutionParams;
	private BatchJobExecutionContext batchJobExecutionContext;

	public BatchJobExecution() {
	}

	public BatchJobExecution(Integer jobExecutionId) {
		this.jobExecutionId = jobExecutionId;
	}

	public BatchJobExecution(Integer jobExecutionId, Batch batch, Bean bean, BatchJobInstance batchJobInstance,
			Date createTime, Date startTime, Date endTime, String status, String exitCode, String exitMessage,
			Date lastUpdated, String jobConfigurationLocation, Set<BatchStepExecution> batchStepExecutions,
			BatchJobExecutionParams batchJobExecutionParams, BatchJobExecutionContext batchJobExecutionContext) {
		this.jobExecutionId = jobExecutionId;
		this.batch = batch;
		this.bean = bean;
		this.batchJobInstance = batchJobInstance;
		this.createTime = createTime;
		this.startTime = startTime;
		this.endTime = endTime;
		this.status = status;
		this.exitCode = exitCode;
		this.exitMessage = exitMessage;
		this.lastUpdated = lastUpdated;
		this.jobConfigurationLocation = jobConfigurationLocation;
		this.batchStepExecutions = batchStepExecutions;
		this.batchJobExecutionParams = batchJobExecutionParams;
		this.batchJobExecutionContext = batchJobExecutionContext;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "JOB_EXECUTION_ID", unique = true, nullable = false)
	public Integer getJobExecutionId() {
		return this.jobExecutionId;
	}

	public void setJobExecutionId(Integer jobExecutionId) {
		this.jobExecutionId = jobExecutionId;
	}

	// @Version
	@Column(name = "VERSION")
	public Long getVersion() {
		return this.version;
	}

	public void setVersion(Long version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "batch_id")
	public Batch getBatch() {
		return this.batch;
	}

	public void setBatch(Batch batch) {
		this.batch = batch;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "bean_id")
	public Bean getBean() {
		return this.bean;
	}

	public void setBean(Bean bean) {
		this.bean = bean;
	}

	@ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinColumn(name = "JOB_INSTANCE_ID")
	public BatchJobInstance getBatchJobInstance() {
		return this.batchJobInstance;
	}

	public void setBatchJobInstance(BatchJobInstance batchJobInstance) {
		this.batchJobInstance = batchJobInstance;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATE_TIME", length = 19)
	public Date getCreateTime() {
		return this.createTime;
	}

	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "START_TIME", length = 19)
	public Date getStartTime() {
		return this.startTime;
	}

	public void setStartTime(Date startTime) {
		this.startTime = startTime;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "END_TIME", length = 19)
	public Date getEndTime() {
		return this.endTime;
	}

	public void setEndTime(Date endTime) {
		this.endTime = endTime;
	}

	@Column(name = "STATUS", length = 10)
	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@Column(name = "EXIT_CODE", length = 2500)
	public String getExitCode() {
		return this.exitCode;
	}

	public void setExitCode(String exitCode) {
		this.exitCode = exitCode;
	}

	@Column(name = "EXIT_MESSAGE", length = 2500)
	public String getExitMessage() {
		return this.exitMessage;
	}

	public void setExitMessage(String exitMessage) {
		this.exitMessage = exitMessage;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "LAST_UPDATED", length = 19)
	public Date getLastUpdated() {
		return this.lastUpdated;
	}

	public void setLastUpdated(Date lastUpdated) {
		this.lastUpdated = lastUpdated;
	}

	@Column(name = "JOB_CONFIGURATION_LOCATION", length = 2500)
	public String getJobConfigurationLocation() {
		return this.jobConfigurationLocation;
	}

	public void setJobConfigurationLocation(String jobConfigurationLocation) {
		this.jobConfigurationLocation = jobConfigurationLocation;
	}

	// @Cascade({ CascadeType.DELETE })
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "batchJobExecution", cascade = CascadeType.REMOVE)
	public Set<BatchStepExecution> getBatchStepExecutions() {
		return this.batchStepExecutions;
	}

	public void setBatchStepExecutions(Set<BatchStepExecution> batchStepExecutions) {
		this.batchStepExecutions = batchStepExecutions;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "batchJobExecution", cascade = CascadeType.ALL)
	public BatchJobExecutionParams getBatchJobExecutionParams() {
		return this.batchJobExecutionParams;
	}

	public void setBatchJobExecutionParams(BatchJobExecutionParams batchJobExecutionParams) {
		this.batchJobExecutionParams = batchJobExecutionParams;
	}

	// @Cascade(CascadeType.ALL)
	@OneToOne(fetch = FetchType.LAZY, mappedBy = "batchJobExecution", cascade = CascadeType.ALL)
	public BatchJobExecutionContext getBatchJobExecutionContext() {
		return this.batchJobExecutionContext;
	}

	public void setBatchJobExecutionContext(BatchJobExecutionContext batchJobExecutionContext) {
		this.batchJobExecutionContext = batchJobExecutionContext;
	}

}
