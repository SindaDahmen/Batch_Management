package com.nordnet.batchs.entities;

import static javax.persistence.GenerationType.IDENTITY;

// Generated 24 mars 2017 10:30:00 by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Bean generated by hbm2java
 */
@Entity
@Table(name = "bean")
public class Bean implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Integer id;
	private Project project;
	private String name;
	private String class_;
	private Set<Job> jobs = new HashSet<Job>(0);
	private Set<Property> propertiesForBeanId = new HashSet<Property>(0);
	private Set<Property> propertiesForRef = new HashSet<Property>(0);
	private Set<Chunk> chunksForReader = new HashSet<Chunk>(0);
	private Set<Chunk> chunksForWriter = new HashSet<Chunk>(0);
	private Set<Chunk> chunksForProcessor = new HashSet<Chunk>(0);
	private Set<Schedular> schedulars = new HashSet<Schedular>(0);
	private Set<Tasklet> tasklets = new HashSet<Tasklet>(0);
	private Set<Listener> listeners = new HashSet<Listener>(0);
	private Set<BatchJobExecution> batchJobExecutions = new HashSet<BatchJobExecution>(0);

	public Bean() {
	}

	public Bean(Project project, String name, String class_) {
		this.project = project;
		this.name = name;
		this.class_ = class_;
	}

	public Bean(Project project, String name, String class_, Set<Job> jobs, Set<Property> propertiesForBeanId,
			Set<Property> propertiesForRef, Set<Chunk> chunksForReader, Set<Chunk> chunksForWriter,
			Set<Chunk> chunksForProcessor, Set<Schedular> schedulars, Set<Tasklet> tasklets, Set<Listener> listeners,
			Set<BatchJobExecution> batchJobExecutions) {
		this.project = project;
		this.name = name;
		this.class_ = class_;
		this.jobs = jobs;
		this.propertiesForBeanId = propertiesForBeanId;
		this.propertiesForRef = propertiesForRef;
		this.chunksForReader = chunksForReader;
		this.chunksForWriter = chunksForWriter;
		this.chunksForProcessor = chunksForProcessor;
		this.schedulars = schedulars;
		this.tasklets = tasklets;
		this.listeners = listeners;
		this.batchJobExecutions = batchJobExecutions;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "project_id", nullable = false)
	public Project getProject() {
		return this.project;
	}

	public void setProject(Project project) {
		this.project = project;
	}

	@Column(name = "name", nullable = false, length = 45)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "class", nullable = false)
	public String getClass_() {
		return this.class_;
	}

	public void setClass_(String class_) {
		this.class_ = class_;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "bean")
	public Set<Job> getJobs() {
		return this.jobs;
	}

	public void setJobs(Set<Job> jobs) {
		this.jobs = jobs;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "beanByBeanId")
	public Set<Property> getPropertiesForBeanId() {
		return this.propertiesForBeanId;
	}

	public void setPropertiesForBeanId(Set<Property> propertiesForBeanId) {
		this.propertiesForBeanId = propertiesForBeanId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "beanByRef")
	public Set<Property> getPropertiesForRef() {
		return this.propertiesForRef;
	}

	public void setPropertiesForRef(Set<Property> propertiesForRef) {
		this.propertiesForRef = propertiesForRef;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "beanByReader")
	public Set<Chunk> getChunksForReader() {
		return this.chunksForReader;
	}

	public void setChunksForReader(Set<Chunk> chunksForReader) {
		this.chunksForReader = chunksForReader;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "beanByWriter")
	public Set<Chunk> getChunksForWriter() {
		return this.chunksForWriter;
	}

	public void setChunksForWriter(Set<Chunk> chunksForWriter) {
		this.chunksForWriter = chunksForWriter;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "beanByProcessor")
	public Set<Chunk> getChunksForProcessor() {
		return this.chunksForProcessor;
	}

	public void setChunksForProcessor(Set<Chunk> chunksForProcessor) {
		this.chunksForProcessor = chunksForProcessor;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "bean")
	public Set<Schedular> getSchedulars() {
		return this.schedulars;
	}

	public void setSchedulars(Set<Schedular> schedulars) {
		this.schedulars = schedulars;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "bean")
	public Set<Tasklet> getTasklets() {
		return this.tasklets;
	}

	public void setTasklets(Set<Tasklet> tasklets) {
		this.tasklets = tasklets;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "bean")
	public Set<Listener> getListeners() {
		return this.listeners;
	}

	public void setListeners(Set<Listener> listeners) {
		this.listeners = listeners;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "bean")
	public Set<BatchJobExecution> getBatchJobExecutions() {
		return this.batchJobExecutions;
	}

	public void setBatchJobExecutions(Set<BatchJobExecution> batchJobExecutions) {
		this.batchJobExecutions = batchJobExecutions;
	}

}
