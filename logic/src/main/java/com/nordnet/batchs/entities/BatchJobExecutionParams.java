package com.nordnet.batchs.entities;

// Generated 24 mars 2017 10:30:00 by Hibernate Tools 3.4.0.CR1

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

/**
 * BatchJobExecutionParams generated by hbm2java
 */
@Entity
@Table(name = "batch_job_execution_params")
public class BatchJobExecutionParams implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private long jobExecutionId;
	private BatchJobExecution batchJobExecution;
	private String typeCd;
	private String keyName;
	private String stringVal;
	private Date dateVal;
	private Long longVal;
	private Double doubleVal;
	private Character identifying;

	public BatchJobExecutionParams() {
	}

	public BatchJobExecutionParams(BatchJobExecution batchJobExecution) {
		this.batchJobExecution = batchJobExecution;
	}

	public BatchJobExecutionParams(BatchJobExecution batchJobExecution, String typeCd, String keyName, String stringVal,
			Date dateVal, Long longVal, Double doubleVal, Character identifying) {
		this.batchJobExecution = batchJobExecution;
		this.typeCd = typeCd;
		this.keyName = keyName;
		this.stringVal = stringVal;
		this.dateVal = dateVal;
		this.longVal = longVal;
		this.doubleVal = doubleVal;
		this.identifying = identifying;
	}

	@GenericGenerator(name = "generator", strategy = "foreign", parameters = @Parameter(name = "property", value = "batchJobExecution"))
	@Id
	@GeneratedValue(generator = "generator")
	@Column(name = "JOB_EXECUTION_ID", unique = true, nullable = false)
	public long getJobExecutionId() {
		return this.jobExecutionId;
	}

	public void setJobExecutionId(long jobExecutionId) {
		this.jobExecutionId = jobExecutionId;
	}

	@OneToOne(fetch = FetchType.LAZY)
	@PrimaryKeyJoinColumn
	public BatchJobExecution getBatchJobExecution() {
		return this.batchJobExecution;
	}

	public void setBatchJobExecution(BatchJobExecution batchJobExecution) {
		this.batchJobExecution = batchJobExecution;
	}

	@Column(name = "TYPE_CD", length = 45)
	public String getTypeCd() {
		return this.typeCd;
	}

	public void setTypeCd(String typeCd) {
		this.typeCd = typeCd;
	}

	@Column(name = "KEY_NAME", length = 45)
	public String getKeyName() {
		return this.keyName;
	}

	public void setKeyName(String keyName) {
		this.keyName = keyName;
	}

	@Column(name = "STRING_VAL", length = 45)
	public String getStringVal() {
		return this.stringVal;
	}

	public void setStringVal(String stringVal) {
		this.stringVal = stringVal;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DATE_VAL", length = 19)
	public Date getDateVal() {
		return this.dateVal;
	}

	public void setDateVal(Date dateVal) {
		this.dateVal = dateVal;
	}

	@Column(name = "LONG_VAL")
	public Long getLongVal() {
		return this.longVal;
	}

	public void setLongVal(Long longVal) {
		this.longVal = longVal;
	}

	@Column(name = "DOUBLE_VAL", precision = 22, scale = 0)
	public Double getDoubleVal() {
		return this.doubleVal;
	}

	public void setDoubleVal(Double doubleVal) {
		this.doubleVal = doubleVal;
	}

	@Column(name = "IDENTIFYING", length = 1)
	public Character getIdentifying() {
		return this.identifying;
	}

	public void setIdentifying(Character identifying) {
		this.identifying = identifying;
	}

}
